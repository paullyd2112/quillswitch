import Nango from '@nangohq/frontend';
import { supabase } from "@/integrations/supabase/client";

// NOTE: Nango has deprecated public keys in favor of Connect session tokens
// We now create session tokens on the backend and pass them to the frontend
let nangoInstance: Nango | null = null;

// Initialize Nango with a session token (new approach)
export const initializeNango = async (integrationId: string): Promise<Nango> => {
  // Get session token from our backend
  const { data: { session } } = await supabase.auth.getSession();
  const response = await fetch('https://kxjidapjtcxwzpwdomnm.supabase.co/functions/v1/nango-create-session', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${session?.access_token}`,
      'apikey': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imt4amlkYXBqdGN4d3pwd2RvbW5tIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDI5NjUzNzUsImV4cCI6MjA1ODU0MTM3NX0.U1kLjAztYB-Jfye3dIkJ7gx9U7aNDYHrorkI1Bax_g8'
    },
    body: JSON.stringify({ integrationId })
  });

  if (!response.ok) {
    const error = await response.json();
    throw new Error(`Failed to create Nango session: ${error.error}`);
  }

  const { sessionToken } = await response.json();
  
  // Create Nango instance with session token (new method)
  nangoInstance = new Nango({
    host: 'https://api.nango.dev',
    connectSessionToken: sessionToken
  });
  
  return nangoInstance;
};

// CRM provider configurations for Nango
export const NANGO_INTEGRATIONS = {
  salesforce: {
    providerId: 'salesforce',
    connectionId: (userId: string) => `salesforce_${userId}`,
  },
  hubspot: {
    providerId: 'hubspot', 
    connectionId: (userId: string) => `hubspot_${userId}`,
  },
  pipedrive: {
    providerId: 'pipedrive',
    connectionId: (userId: string) => `pipedrive_${userId}`,
  },
} as const;

export type NangoProvider = keyof typeof NANGO_INTEGRATIONS;

// Helper to get connection ID for a user and provider
export const getNangoConnectionId = (userId: string, provider: NangoProvider): string => {
  return NANGO_INTEGRATIONS[provider].connectionId(userId);
};

// Helper to initiate OAuth flow with new Connect session approach
export const initiateNangoOAuth = async (provider: NangoProvider, userId: string) => {
  const config = NANGO_INTEGRATIONS[provider];
  
  try {
    console.log(`Starting ${provider} OAuth flow via Nango Connect for user:`, userId);
    
    // Initialize Nango with session token for this integration
    const nango = await initializeNango(config.providerId);
    
    // Start the auth flow - connection ID will be generated by Nango
    const result = await nango.auth(config.providerId);
    
    console.log('Nango OAuth flow initiated successfully:', result);
    return { success: true, result };
  } catch (error) {
    console.error(`Nango OAuth error for ${provider}:`, error);
    return { success: false, error };
  }
};

// Helper to check connection status
export const checkNangoConnection = async (provider: NangoProvider, userId: string) => {
  const config = NANGO_INTEGRATIONS[provider];
  const connectionId = config.connectionId(userId);
  
  try {
    // Use the proxy function to check connection via Nango API
    const { data: { session } } = await supabase.auth.getSession();
    const response = await fetch('https://kxjidapjtcxwzpwdomnm.supabase.co/functions/v1/nango-proxy', {
      method: 'POST',
      headers: { 
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${session?.access_token}`,
        'apikey': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imt4amlkYXBqdGN4d3pwd2RvbW5tIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDI5NjUzNzUsImV4cCI6MjA1ODU0MTM3NX0.U1kLjAztYB-Jfye3dIkJ7gx9U7aNDYHrorkI1Bax_g8'
      },
      body: JSON.stringify({
        provider: config.providerId,
        endpoint: `connections/${connectionId}`,
        method: 'GET'
      })
    });
    
    if (response.ok) {
      const connections = await response.json();
      return { isConnected: !!connections, connections };
    } else {
      return { isConnected: false, connections: null };
    }
  } catch (error) {
    console.error(`Error checking Nango connection for ${provider}:`, error);
    return { isConnected: false, connections: null };
  }
};

// Helper to delete a connection using the connection ID directly
export const deleteNangoConnection = async (provider: NangoProvider, connectionId: string) => {
  try {
    // Use the proxy function to delete connection via Nango API
    const { data: { session } } = await supabase.auth.getSession();
    const response = await fetch('https://kxjidapjtcxwzpwdomnm.supabase.co/functions/v1/nango-proxy', {
      method: 'POST',
      headers: { 
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${session?.access_token}`,
        'apikey': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imt4amlkYXBqdGN4d3pwd2RvbW5tIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDI5NjUzNzUsImV4cCI6MjA1ODU0MTM3NX0.U1kLjAztYB-Jfye3dIkJ7gx9U7aNDYHrorkI1Bax_g8'
      },
      body: JSON.stringify({
        provider,
        endpoint: `connections/${connectionId}`,
        method: 'DELETE'
      })
    });
    
    if (response.ok) {
      return { success: true };
    } else {
      const error = await response.json();
      return { success: false, error };
    }
  } catch (error) {
    console.error(`Error deleting Nango connection:`, error);
    return { success: false, error };
  }
};