import Nango from '@nangohq/frontend';
import { supabase } from "@/integrations/supabase/client";
import { crmLog } from "@/utils/logging/consoleReplacer";
import { EDGE_FUNCTIONS, NANGO_CONFIG, createAuthHeaders } from "@/utils/constants/apiEndpoints";

// NOTE: Nango has deprecated public keys in favor of Connect session tokens
// We now create session tokens on the backend and pass them to the frontend
let nangoInstance: Nango | null = null;

// Initialize Nango with a session token (new approach)
export const initializeNango = async (integrationId: string): Promise<Nango> => {
  // Get session token from our backend
  const { data: { session } } = await supabase.auth.getSession();
  const response = await fetch(EDGE_FUNCTIONS.nangoCreateSession, {
    method: 'POST',
    headers: createAuthHeaders(session?.access_token || ''),
    body: JSON.stringify({ integrationId })
  });

  if (!response.ok) {
    const error = await response.json();
    throw new Error(`Failed to create Nango session: ${error.error}`);
  }

  const { sessionToken } = await response.json();
  
  // Create Nango instance with session token (new method)
  nangoInstance = new Nango({
    host: NANGO_CONFIG.host,
    connectSessionToken: sessionToken
  });
  
  return nangoInstance;
};

// CRM provider configurations for Nango
export const NANGO_INTEGRATIONS = {
  salesforce: {
    providerId: 'salesforce',
    connectionId: (userId: string) => `salesforce_${userId}`,
    scopes: ['id', 'api', 'refresh_token', 'offline_access'],
  },
  hubspot: {
    providerId: 'hubspot', 
    connectionId: (userId: string) => `hubspot_${userId}`,
    scopes: ['crm.objects.contacts.read', 'crm.objects.companies.read', 'crm.objects.deals.read'],
  },
  pipedrive: {
    providerId: 'pipedrive',
    connectionId: (userId: string) => `pipedrive_${userId}`,
    scopes: ['read', 'write'],
  },
} as const;

export type NangoProvider = keyof typeof NANGO_INTEGRATIONS;

// Helper to get connection ID for a user and provider
export const getNangoConnectionId = (userId: string, provider: NangoProvider): string => {
  return NANGO_INTEGRATIONS[provider].connectionId(userId);
};

// Helper to initiate OAuth flow with new Connect session approach
export const initiateNangoOAuth = async (provider: NangoProvider, userId: string) => {
  const config = NANGO_INTEGRATIONS[provider];
  
  console.log('🔍 Initiating Nango OAuth:', {
    provider,
    providerId: config.providerId,
    userId,
    scopes: config.scopes
  });
  
  try {
    crmLog.info('Starting OAuth flow via Nango', { provider });
    
    // Initialize Nango with session token for this integration
    console.log('📡 Creating Nango session for integration:', config.providerId);
    const nango = await initializeNango(config.providerId);
    console.log('✅ Nango client initialized successfully');
    
    // Start the auth flow - connection ID will be generated by Nango
    console.log('🚀 Starting auth flow with providerId:', config.providerId);
    
    try {
      console.log('🚀 About to call nango.auth(), checking for popup blockers...');
      console.log('🔍 Nango auth parameters:', {
        providerId: config.providerId,
        nangoInstance: !!nango,
        userId: userId
      });
      
      // For Salesforce sandbox, try with connection ID
      const connectionId = `salesforce_${userId}`;
      console.log('🔧 Using connection ID:', connectionId);
      
      // Add a timeout to catch hanging auth calls
      const authPromise = nango.auth(config.providerId, connectionId);
      const timeoutPromise = new Promise((_, reject) => 
        setTimeout(() => reject(new Error('OAuth timeout after 30 seconds')), 30000)
      );
      
      console.log('⏱️ Waiting for OAuth response (30s timeout)...');
      const result = await Promise.race([authPromise, timeoutPromise]);
      
      console.log('✅ Nango auth completed successfully:', result);
      crmLog.info('Nango OAuth flow initiated successfully');
      return { success: true, result };
    } catch (authError) {
      console.error('❌ nango.auth() failed:', {
        error: authError instanceof Error ? authError.message : 'Unknown auth error',
        errorDetails: authError,
        providerId: config.providerId,
        errorType: typeof authError
      });
      throw authError;
    }
  } catch (error) {
    console.error('❌ Nango OAuth failed:', {
      error: error instanceof Error ? error.message : 'Unknown error',
      errorDetails: error,
      provider,
      providerId: config.providerId
    });
    
    crmLog.error(`Nango OAuth error for ${provider}`, error instanceof Error ? error : undefined, { provider });
    return { success: false, error };
  }
};

// Helper to check connection status
export const checkNangoConnection = async (provider: NangoProvider, userId: string) => {
  const config = NANGO_INTEGRATIONS[provider];
  const connectionId = config.connectionId(userId);
  
  try {
    // Use the proxy function to check connection via Nango API
    const { data: { session } } = await supabase.auth.getSession();
    const response = await fetch(EDGE_FUNCTIONS.nangoProxy, {
      method: 'POST',
      headers: createAuthHeaders(session?.access_token || ''),
      body: JSON.stringify({
        provider: config.providerId,
        endpoint: `connections/${connectionId}`,
        method: 'GET'
      })
    });
    
    if (response.ok) {
      const connections = await response.json();
      return { isConnected: !!connections, connections };
    } else {
      return { isConnected: false, connections: null };
    }
  } catch (error) {
    crmLog.error(`Error checking Nango connection for ${provider}`, error instanceof Error ? error : undefined, { provider });
    return { isConnected: false, connections: null };
  }
};

// Helper to delete a connection using the connection ID directly
export const deleteNangoConnection = async (provider: NangoProvider, connectionId: string) => {
  try {
    // Use the proxy function to delete connection via Nango API
    const { data: { session } } = await supabase.auth.getSession();
    const response = await fetch(EDGE_FUNCTIONS.nangoProxy, {
      method: 'POST',
      headers: createAuthHeaders(session?.access_token || ''),
      body: JSON.stringify({
        provider,
        endpoint: `connections/${connectionId}`,
        method: 'DELETE'
      })
    });
    
    if (response.ok) {
      return { success: true };
    } else {
      const error = await response.json();
      return { success: false, error };
    }
  } catch (error) {
    crmLog.error('Error deleting Nango connection', error instanceof Error ? error : undefined, { provider, connectionId });
    return { success: false, error };
  }
};